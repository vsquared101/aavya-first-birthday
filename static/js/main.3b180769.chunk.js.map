{"version":3,"sources":["assets/images/pp_bg.png","assets/images/aavya.jpg","assets/images/coolaavya.jpg","assets/images/anujdada.jpg","assets/images/neetikadidi.jpg","assets/images/taujitaiji.jpg","assets/images/bhabhi.jpg","components/Card/Card.js","components/Greeting/Greeting.js","components/Board/Board.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","frontImg","backImg","flipped","onClick","img","className","src","alt","Greeting","Board","useState","cards","setCards","checkers","setCheckers","completed","setCompleted","onCardClick","card","checkersFull","length","id","cardAlreadyInCheckers","newCheckers","type","validateCheckers","setTimeout","useEffect","newCards","map","find","c","includes","key","App","images","aavya","coolaavya","anujdada","neetikadidi","taujitaiji","bhabhi","arr","len","i","randomIdx","Math","floor","random","copyCurrent","copyRandom","shuffle","Object","keys","reduce","result","item","getCard","buildCards","style","display","justifyContent","alignItems","height","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2HAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,kNCa5BC,G,MAVF,SAAAC,GAAU,IACdC,EAAuCD,EAAvCC,SAAUC,EAA6BF,EAA7BE,QAASC,EAAoBH,EAApBG,QAASC,EAAWJ,EAAXI,QAC7BC,EAAMF,EAAUF,EAAWC,EACjC,OACE,yBAAKI,UAAU,OAAOF,QAASA,GAC7B,yBAAKG,IAAKF,EAAKG,IAAI,mBCaVC,G,MAlBE,WACb,OACI,yBAAKH,UAAU,kBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,WACf,6DACA,qEAGJ,yBAAKA,UAAU,aACX,yBAAKA,UAAU,WACf,oDC4DDI,G,MArED,SAACV,GAAW,IAAD,EACGW,mBAASX,EAAMY,OADlB,mBAChBA,EADgB,KACTC,EADS,OAESF,mBAAS,IAFlB,mBAEhBG,EAFgB,KAENC,EAFM,OAGWJ,mBAAS,IAHpB,mBAGhBK,EAHgB,KAGLC,EAHK,KAKjBC,EAAc,SAAAC,GAAI,OAAI,WAE1B,IAAIC,EAAaN,KA0BjB,SAA+BA,EAAUK,GACvC,OAA2B,IAApBL,EAASO,QAAgBP,EAAS,GAAGQ,KAAOH,EAAKG,GA3B5BC,CAAsBT,EAAUK,GAA9D,CAEA,IAAMK,EAAW,sBAAOV,GAAP,CAAiBK,IAClCJ,EAAYS,GAkBZ,SAA0BV,GACxB,OAA2B,IAApBA,EAASO,QAChBP,EAAS,GAAGW,OAASX,EAAS,GAAGW,KAlBJC,CAAiBF,KAGtB,IAArBR,EAAUK,OACXM,YAAW,WACTV,EAAa,GAAD,mBAAKD,GAAL,CAAgBQ,EAAY,GAAGC,UAC1C,KAEHR,EAAa,GAAD,mBAAKD,GAAL,CAAgBQ,EAAY,GAAGC,SAI3CL,EAAaI,IAkBfG,YAAW,WACTZ,EAAY,MAlBK,KAYrB,SAASK,EAAaN,GACpB,OAA2B,IAApBA,EAASO,UAoBpB,OAVAO,qBAAU,WACR,IAAMC,EAAWjB,EAAMkB,KAAI,SAAAX,GAAI,kCAC1BA,GAD0B,IAE7BhB,QACEW,EAASiB,MAAK,SAAAC,GAAC,OAAIA,EAAEV,KAAOH,EAAKG,OACjCN,EAAUiB,SAASd,EAAKM,WAE5BZ,EAASgB,KACR,CAACf,EAAUE,IAGZ,yBAAKV,UAAU,SACS,IAArBU,EAAUK,QAAgBT,EAAMkB,KAAI,SAAAX,GAAI,OACvC,kBAAC,EAAD,iBAAUA,EAAV,CAAgBf,QAASc,EAAYC,GAAOe,IAAKf,EAAKG,SAGlC,IAArBN,EAAUK,QAAgB,kBAAC,EAAD,S,qHClDlBc,MATf,WACE,IAAMvB,EAUR,WACE,IAAIU,EAAK,EACHc,EAAS,CAACC,UAAOC,cAAWC,aAAUC,gBAAaC,eAAYC,YAWrE,OAGF,SAAiBC,GAEf,IADA,IAAIC,EAAMD,EAAItB,OACLwB,EAAI,EAAGA,EAAID,EAAKC,IAAK,CAC5B,IAAIC,EAAYC,KAAKC,MAAMD,KAAKE,SAAWL,GACvCM,EAAW,eAAOP,EAAIE,IACtBM,EAAU,eAAOR,EAAIG,IACzBH,EAAIE,GAAKM,EACTR,EAAIG,GAAaI,EAEnB,OAAOP,EAZAS,CAVOC,OAAOC,KAAKlB,GAAQmB,QAAO,SAACC,EAAQC,GAChD,IAAMC,EAAU,iBAAO,CACrBpC,GAAIA,IACJG,KAAMgC,EACNvD,YACAD,SAAUmC,EAAOqB,GACjBtD,SAAS,IAEX,MAAM,GAAN,mBAAWqD,GAAX,CAAmBE,IAAWA,QAC7B,KAtBWC,GACd,OACE,yBAAKrD,UAAU,MAAMsD,MAAO,CAACC,QAAS,OAASC,eAAe,SAAUC,WAAW,SAAUC,OAAQ,UACnG,kBAAC,EAAD,CAAOpD,MAAOA,MCFAqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3b180769.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pp_bg.6d5a8c42.png\";","module.exports = __webpack_public_path__ + \"static/media/aavya.d0e30ca5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/coolaavya.f3468cc0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/anujdada.b48a2dbb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/neetikadidi.7b2817ea.jpg\";","module.exports = __webpack_public_path__ + \"static/media/taujitaiji.c8f94136.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bhabhi.c6262f2a.jpg\";","import React from 'react'\r\nimport './Card.css'\r\n\r\nconst Card = props => {\r\n  const {frontImg, backImg, flipped, onClick} = props;\r\n  const img = flipped ? frontImg : backImg;\r\n  return (\r\n    <div className=\"Card\" onClick={onClick}>\r\n      <img src={img} alt=\"Memory Game\"/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card","import React from 'react';\r\nimport './Greeting.css';\r\n\r\nconst Greeting = () => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <div className=\"front side\">\r\n                <div className=\"content\">\r\n                <h3>Happy 1st Birthday Dear Aavya</h3>\r\n                <p>Wish you a very very Happy Birthday.</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"back side\">\r\n                <div className=\"content\">\r\n                <h3>Enjoy your day!</h3>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Greeting;","import React, {useState, useEffect} from 'react';\r\nimport Card from '../Card/Card';\r\nimport Greeting from '../Greeting/Greeting';\r\nimport './Board.css';\r\n\r\nconst Board = (props) => {\r\n  const [cards, setCards] = useState(props.cards);\r\n  const [checkers, setCheckers] = useState([]);\r\n  const [completed, setCompleted] = useState([]);\r\n\r\n  const onCardClick = card => () => {\r\n\r\n    if (checkersFull(checkers) || cardAlreadyInCheckers(checkers, card)) return;\r\n\r\n    const newCheckers = [...checkers, card];\r\n    setCheckers(newCheckers);\r\n\r\n    const cardsInCheckersMatched = validateCheckers(newCheckers);\r\n\r\n    if (cardsInCheckersMatched) {\r\n      if(completed.length === 5){\r\n        setTimeout(() => {\r\n          setCompleted([...completed, newCheckers[0].type]);\r\n        }, 1000)\r\n      } else{\r\n        setCompleted([...completed, newCheckers[0].type]);\r\n      }\r\n    }\r\n\r\n    if (checkersFull(newCheckers)) {\r\n      resetCheckersAfter(1000);\r\n    }\r\n\r\n    function validateCheckers(checkers){\r\n      return checkers.length === 2 &&\r\n      checkers[0].type === checkers[1].type\r\n    }\r\n\r\n    function cardAlreadyInCheckers(checkers, card){\r\n      return checkers.length === 1 && checkers[0].id === card.id\r\n    }\r\n\r\n    function checkersFull(checkers){\r\n      return checkers.length === 2\r\n    }\r\n\r\n    function resetCheckersAfter(time) {\r\n      setTimeout(() => {\r\n        setCheckers([])\r\n      }, time)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const newCards = cards.map(card => ({\r\n      ...card,\r\n      flipped:\r\n        checkers.find(c => c.id === card.id) ||\r\n        completed.includes(card.type),\r\n    }));\r\n    setCards(newCards);\r\n  }, [checkers, completed])\r\n\r\n  return (\r\n    <div className=\"Board\">\r\n      {completed.length !== 6 && cards.map(card => (\r\n        <Card {...card} onClick={onCardClick(card)} key={card.id} />\r\n      ))}\r\n\r\n      {completed.length === 6 && <Greeting/>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Board\r\n","import React from 'react';\r\nimport Board from './components/Board/Board';\r\nimport backImg from './assets/images/pp_bg.png';\r\nimport aavya from './assets/images/aavya.jpg';\r\nimport coolaavya from './assets/images/coolaavya.jpg';\r\nimport anujdada from './assets/images/anujdada.jpg';\r\nimport neetikadidi from './assets/images/neetikadidi.jpg';\r\nimport taujitaiji from './assets/images/taujitaiji.jpg';\r\nimport bhabhi from './assets/images/bhabhi.jpg';\r\n\r\nfunction App() {\r\n  const cards = buildCards()\r\n  return (\r\n    <div className=\"App\" style={{display: 'flex',  justifyContent:'center', alignItems:'center', height: '100vh'}}>\r\n      <Board cards={cards} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n\r\nfunction buildCards() {\r\n  let id = 0\r\n  const images = {aavya, coolaavya, anujdada, neetikadidi, taujitaiji, bhabhi}\r\n  const cards = Object.keys(images).reduce((result, item) => {\r\n    const getCard = () => ({\r\n      id: id++,\r\n      type: item,\r\n      backImg,\r\n      frontImg: images[item],\r\n      flipped: false,\r\n    })\r\n    return [...result, getCard(), getCard()]\r\n  }, [])\r\n  return shuffle(cards)\r\n}\r\n\r\nfunction shuffle(arr) {\r\n  let len = arr.length\r\n  for (let i = 0; i < len; i++) {\r\n    let randomIdx = Math.floor(Math.random() * len)\r\n    let copyCurrent = {...arr[i]}\r\n    let copyRandom = {...arr[randomIdx]}\r\n    arr[i] = copyRandom\r\n    arr[randomIdx] = copyCurrent\r\n  }\r\n  return arr\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}